Last <a title="Neural networks in a nutshell" href="http://themenwhostareatcodes.wordpress.com/2014/03/02/neural-networks-in-a-nutshell/" target="_blank">post</a> I showed the *McCulloch-Pitts neuron*, which main difference to a more wide model is the *threshold function*. Continuing this subject for while, I will talk briefly about other existent *activation functions*. Pay attention to the fact the neuron structure is the same, the only difference being how it fires.

<!--more-->

The so called *unit step function* has an abrupt change in value when reaches `x = 0`, but it can be either a *treshold function* (limited between `0` and `1`), or a *signal function* (output between `-1` and `1`), as shown in *Fig. 4*. However this change doesn't happens in the real neuron. It's not binary, but more smooth, going from the lower limit and growing until the upper limit, shaped like an **S**. The *sigmoid function* has this shape, as shown in *Fig. 5*, and the two cases demonstrated here are the *logistic sigmoid* (*Eq. 3*) and the *hyperbolic tangent* (*Eq. 4*) functions.

[caption id="attachment_354" align="aligncenter" width="360"]<a href="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-05.png"><img class=" wp-image-354 " alt="figure-05" src="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-05.png?w=300" width="360" height="191" /></a> <strong>Figure 5</strong> Sigmoid function shaped as an S.[/caption]

- (3) $latex \varphi(v) = \frac{1}{1 + e^{-av}}$, with $latex \varphi(v)$ between `0` and `1`.
- (4) $latex \varphi(v) = tanh(v) = \frac{e^v - e^{-v}}{e^v + e^{-v}}$, with $latex \varphi(v)$ between `-1` and `1`.

Also, another caracteristic of these functions is they are *differentiable*, while the *unit step* is not, what will prove to be an importante feature still in this post.

So, now, a piece of code. Using the code from the previous post we will build a more general model of a neuron, containing the *logsig* (with `a = 1`) and *tansig* functions:

[code language="python"]
from math import exp, tanh


def treshold(x):
    if x >= 0:
        return 1
    else:
        return 0

def signal(x):
    if x >= 0:
        return 1
    else:
        return -1

def logsig(x):
    return (1 / (1 + exp(-x)))

tansig = tanh
[/code]

Also a class defining a general Neuron. Notice the default value for parameter *activation* in `Neuron.__init__`

[code language="python"]
class Neuron(object):

    def __init__(self, weights, bias, activation=treshold):
        self.weights = weights
        self.bias = bias
        self.activation = activation

    def fire(self, inputs):
        summed = sum([i*w for (i,w) in zip(inputs, self.weights)])
        return self.activation(summed + self.bias)
[/code]

indicating that given no *activation function*, our neuron is a *McCulloch-Pitts*. And the tests

[code language="python"]
if __name__ == '__main__':
    neuron_1 = Neuron([0.4, 0.6, 0.9], -0.8)
    neuron_2 = Neuron([0.4, 0.6, 0.9], -1.5, signal)
    neuron_3 = Neuron([0.4, 0.6, 0.9], -0.8, logsig)
    neuron_4 = Neuron([0.4, 0.6, 0.9], -0.8, tansig)

    inputs = [1, 0, 1]

    print('Test #1 - inputs on neuron_1:', neuron_1.fire(inputs))
    print('Test #1 - inputs on neuron_2:', neuron_2.fire(inputs))
    print('Test #1 - inputs on neuron_3:', neuron_3.fire(inputs))
    print('Test #1 - inputs on neuron_4:', neuron_4.fire(inputs))
[/code]

```
embat@hal9000:~/desktop/neural$ python3.3 neuron.py
Test #1 - inputs on neuron_1: 1
Test #1 - inputs on neuron_2: -1
Test #1 - inputs on neuron_3: 0.6224593312018546
Test #1 - inputs on neuron_4: 0.46211715726000974
embat@hal9000:~/desktop/neural$
```

showing the infinite range of values a neuron with *sigmoid activation function* produces.

Now we know an ANN is a distributed parallel system composed of very simple processing units (*neurons*) interconnected and how these units work, it's time to learn about some topologies. In this post we will talk about the perceptrons, which are *feedforward neural networks*. The nexts will cover more elaborated ones.

## 2 - Perceptron

The *Perceptron* was the first algorithmically described neural network (and is the simplest). It was invented by <a href="http://en.wikipedia.org/wiki/Frank_Rosenblatt" target="_blank">*Frank Rosenblatt*</a> in 1958, is a model for learning with a teacher (*supervised learning*) and is used to classify patterns *linearly separable* (patterns that lie on opposite sides of a hyperplane). Basically, the *Perceptron* is a single neuron, that can only classify examples belonging to two *linearly separable* classes. Others configurations can use more than a neuron per layer, but the classes must be all *linearly separable*.

Depending of the source consulted, the *McCulloch-Pitts* model can use the *treshold function* or the *signal function* to activate the neuron. Previously we adopted the *treshold function* to define the model, but we will loose this definition a little in order to maintain consistency with the sources used (shown in the *references* section at the end of the post). So now, our neuron will use the *signal function*.

[caption id="attachment_370" align="aligncenter" width="360"]<a href="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-06.png"><img class=" wp-image-370  " alt="Figure 6 Signal-flow graph of the perceptron." src="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-06.png?w=300" width="360" height="174" /></a> <strong>Figure 6</strong> Signal-flow graph of the perceptron.[/caption]

As shown in *Fig. 6*, the *Perceptron* with a single neuron is equal to the diagram of *Fig. 1*, so let's create a method to update a neuron's *weights* and *bias*

[code language="python"]
def update(input_vector, factor):
    self.weights = [(w + factor*x) for (w, x) in
                    zip(self.weights, input_vector)]
    self.bias = self.bias + factor # x = +1
[/code]

which receives an *input_vector* and a *factor* and change the *weights* and *bias* values. It will be useful soon.

So, according to *Fig. 6*, the total input $latex v$ is given by *Eq. 5*:

- (5) $latex v = \sum_{j=1}^{m} w_j x_j + b$

The goal is to correctly classify the inputs into classes `C1` (if $latex \varphi(v) = +1$) or `C2` (if $latex \varphi(v) = -1$). So, we need to define a border, and that's when *Eq. 5* is `0` ($latex v = 0$ arbitrarily belongs to class `C1` as $latex \varphi(0) = +1$), as shown below:

- (6) $latex v = \sum_{j=1}^{m} w_j x_j + b = 0$

Now we can plot a map of the decision regions in the *m*-dimensional space. In the simplest case (one neuron) there are two decision regions separated by a *hyperplane*, as defined by *Eq. 6*. The *Fig. 7* illustrates the case with two inputs, for which the boundary takes the form of a *straight line*. Each point $latex (x_1, x_2)$ above the boundary line belongs to class `C1` and each point below the boundary line belongs to class `C2`. Note the bias *b* just shift the line away from the origin.

[caption id="attachment_380" align="aligncenter" width="260"]<a href="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-07.png"><img class="size-medium wp-image-380 " alt="figure-07" src="http://themenwhostareatcodes.files.wordpress.com/2014/03/figure-07.png?w=260" width="260" height="300" /></a> <strong>Figure 7</strong> Decision boundary for a two dimensional, two class problem.[/caption]

Here is the code for the Perceptron:

[code language="python"]
class Perceptron(object):
    def __init__(self, input_size, lrn_rate=1):
        """'input_size' is the length of the input.
        'lrn_rate' is the learning rate.
        """
        self.neuron = Neuron([0]*input_size, 0, signal)
        self.lrn_rate = lrn_rate
        self.fire = self.neuron.fire

    def training(self, examples):
        epochs = 0

        while True:
            epochs = epochs + 1
            error_count = 0

            for (input_vector, desired_output) in examples:
                actual_output = self.neuron.fire(input_vector)
                error = desired_output - actual_output

                if error != 0:
                    learned = self.lrn_rate*error
                    self.neuron.update(input_vector, learned)
                    error_count = error_count + 1

            if error_count == 0:
                break

        return epochs
[/code]

The Perceptron contains only one neuron and an attribute learning rate, so as methods `training()` and `fire()` (a copy of the neuron's `fire()` function). The method `training()` runs according to the algorithm

1. Take a perceptron with `weights` and `bias` reset.
2. For each example `n`, fire the perceptron.
3. If `actual_output` is wrong:
       `weights(n) = weights(n) + lrn_rate*error*x(n)`
       `bias(n) = bias(n) + lrn_rate*error`
where
       `error = desired_output - actual_output` and `weights` and `x` are vectors.
4. If `error_count &gt; 0`:
       `goto` step 2.
5. Finish

and as the Perceptron always converge (i.e. it will train until every example gives a correct answer, stop changing weights), I `break` the loop when the `error_count` is zero (it learnt everything). Now, here there's code to test the Perceptron:

[code language="python"]
def classify(y, x, a, b):
    if y >= a*x + b:
        return 1 # class C1
    return -1 # class C2

def gen_examples(num_examples, a, b):
    examples = []

    for _ in range(num_examples):
        x1 = uniform(-10, 10)
        x2 = uniform(-10, 10)
        examples.append(([x1, x2], classify(x1, x2, a, b)))

    return examples

def perceptron(lrn_rate, num_training, num_test, a, b):
    perceptron = Perceptron(2, lrn_rate=lrn_rate)

    examples = gen_examples(num_training, a, b)
    print('#TRAINING')
    epochs = perceptron.training(examples)
    print('epochs:', epochs)

    examples = gen_examples(num_test, a, b)
    print('#TESTING')
    error_count = load_test(perceptron, examples)
    print('error_count:', error_count)
[/code]

I used the line $latex x_2 = -5x_1 + 2$ to separate the classes. The function `gen_examples()` creates a random number of points that matches only one class, so this way we maintain a similar number of examples for both. The command line to execute this code is `embat@hal9000:~/desktop/neural$ ./test.py perceptron`.

Remember: the convergence is when, during the training, all examples are correctly classified. It doesn't mean the *net* will never make a mistake when used with different inputs.

Every code, image and post info is saved <a href="https://github.com/embatbr/The-Men-Who-Stare-at-Codes/tree/master/posts/neural-networks-in-a-nutshell-2" title="Repository at gthub" target="_blank">here</a>. Next post I will talk about the types of Multiclass Perceptron and Multilayer Perceptron.

## References

- <a href="http://www.amazon.com/Neural-Networks-Learning-Machines-Edition/dp/0131471392" target="_blank">Neural Networks and Learning Machines - 3rd Ed - Haykin, Simon - Pearson</a>.
- <a href="http://prolland.free.fr/works/ai/docs/neuro-intro.pdf" target="_blank">An introduction to Neural Networks - 8th Ed. - Kröse, Ben; van der Smagt, Patrick - University of Amsterdam</a>.

**Live long and prosper**