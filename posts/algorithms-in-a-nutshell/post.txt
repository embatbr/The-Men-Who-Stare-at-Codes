Moving to a new *nutshell series* (don't worry, I'll finish the one about neural nets some day), we are going to see the basic topics of what in many universities is the **Algorithms and Data Structures** course. My references will be slides from the <a href="http://www.cin.ufpe.br/~if672" target="_blank">course in my grad school</a> and one or other link from <a href="https://www.youtube.com/watch?v=iDbyYGrswtg" target="_blank">the internet</a>. Also, the majority of codes (if not all of them) will be written in the **C programming language** (if you don't know what is it, get the fuck out of here you heretic!).

<!--more-->

## 0 - Definition

An **algorithm** is a systematic process to solve a problem. It's a finite sequence of steps well defined to execute a task, like a *cooking recipe*. The term "well defined" seems a little vague, but basically is "defined to the point one can understand precisely each step".

A **data structure** is, like the name says, a structure build to somehow store and represent data. A computer network will be represented as a matrix of adjacency or as nodes in a graph? Two distinct structures to represent the same data.

Algorithms and data structures live symbiotically. We cannot think about algorithms without a structure to represent the data manipulated by it. It doesn't follow. Also, data structures alone are practically useless.

## 1 - Computational Algorithm

A computational algorithm could be defined as a procedure that turns data into information. This subset we are going to study has two basic aspects:

**Correctness:** The method is correct and it is proved using the premises. In other words, every possible input will give a correct output, even for an infinite input set. The proof is mathematically demonstrable.

**Complexity:** Evaluate the efficiency of the algorithm in computational resources, using parameters such as execution time, memory usage and etc. This way we can guarantee our proved corrected algorithm is usable or not.

**<span style="color:#dd2222;">Warning!</span>** A (computational) algorithm is not the same of a program. A program is merely an implemented algorithm running in a machine. The algorithm may be incorrect (fail to proof correctness) but still can be executed. The algorithm is just an abstraction defining how a particular problem is solved.

## 2 - Complexity

Although we can define complexity as we wish, in our study complexity is the execution time measured by mathematical expressions to translate algorithm's behaviour in terms of input size. We'll always consider the *worst case*.

Let's see some code. In our example, we'll find the complexity of summing all numbers of an array.

[code language="c"]
#include <stdio.h>

int main(void)
{
    int numbers[] = {1, 2, 3, 4, 5};
    int sum = 0;
    int i = 0;
    int len = sizeof(numbers) / sizeof(int);

    while(i < len)
    {
        sum = sum + numbers[i];
        i++;
    }

    printf("sum: %d\n", sum);
    return 0;
}
[/code]

Inside the method `main`, all lines above and below the `while` block are executed in a constant time (maybe not `sizeof(numbers)`, but we'll consider it anyway). The loop is executed 5 times, but for an arbitrary length we consider `n`, the input size. The execution time is

**exec_time = cte + (t_comp + t_sum + t_assig + t_add)\*n**
**exec_time = cte + cte2\*n**

and we can see that this algorithm runs linearly. So, we replace this function by another, simpler, with the same asymptotic behaviour. For functions with terms of different order we take the higher order to study it. Ex:

**6n³ + 4n + 9 -> n³**

To capture this notion we use a function that ignores additive and multiplicative constants, taking only the higher order term. If the number of steps is **3n**, we say the execution time is <a href="http://en.wikipedia.org/wiki/Big_O_notation" target="_blank">**O(n)**</a>, if it's **2n² + n**, we use **O(n²)**. The objective here is highlight the curve's dominant term, the one responsible for it's behaviour.

The *h* function in *O(h)* is taken by the worst case. If an algorithm executes with constant time for almost every input, but in the worst case it takes *O(h)*, we say this algorithm's complexity is *O(h)*.

## 3 - Arrays, lists, queues and stacks

The simpler data structure is an **array**, which I believe everyone reading this already knows. An array is a sequence of elements of the same type, with a size allocated *a priori* (static allocation). All elements are allocated consecutively and the access is direct (as we saw in the previous code).

A **list**, like an array, is a sequence of elements of the same type. However, it is malleable, meaning we can insert/remove elements at demand, without worrying about space (I'm assuming you'll not create a list with gigabytes of data). Being malleable, we cannot allocate elements "side by side", so each one needs a <a href="http://lmgtfy.com/?q=pointers+in+C" target="_blank">pointer</a> to the next (and some times to the previous). Also, the access is not direct.

[code language="c"]
typedef struct list LIST;
struct list
{
    int value;
    LIST *next;
};

LIST * gen_list(int size)
{
    LIST *head = malloc(sizeof(LIST));
    head->value = 1;
    LIST *tail = head;

    int i;
    for(i = 1; i < size; i++)
    {
        tail->next = malloc(sizeof(LIST));
        tail->next->value = i + 1;
        tail = tail->next;
    }

    return head;
}

void code02(void)
{
    LIST *list = gen_list(3);

    while(list != 0)
    {
        printf("%d\n", list->value);
        list = list->next;
    }
}
[/code]

The code above is a simple linked list (or just list) implementation. Notice the `struct` contains a value (the number) and a pointer to the next element. The search in a list is **O(n)** but the insertion/removal takes constant time. As an exercise, use this code (or not) to create a double linked list. It's easy.

**Queues** and **stacks** are particular cases of lists. They're still dynamic structures but we operate them differently. While in a regular list insertions and removals can be done anywhere, in a queue each element is inserted at the end (tail) and removed at the begin (head). This is called **FIFO** (**F**irst **I**n, **F**irst **O**ut). It's like any queue you know in the ordinary world. A stack, on the other hand, is inserted and removed from the "top". Each new element is put above the others already there, and is removed before them. This is called **LIFO** (**L**ast **I**n, **F**irst **O**ut). Think in a stack of dishes.

Now, let's see some code. First the queue:

[code language="c"]
void enqueue(LIST *queue, int value)
{
    while(queue->next != 0)
    {
        queue = queue->next;
    }

    queue->next = malloc(sizeof(LIST));
    queue->next->value = value;
}

void code03(void)
{
    LIST *queue = gen_list(3);
    LIST *head = queue;

    printf("queue:\n");
    while(queue != 0)
    {
        printf("%d\n", queue->value);
        queue = queue->next;
    }

    queue = head;
    enqueue(queue, 4);

    printf("enqueue element 4:\n");
    while(queue != 0)
    {
        printf("%d\n", queue->value);
        queue = queue->next;
    }

    printf("dequeue element %d:\n", head->value);
    head = head->next;
    queue = head;
    while(queue != 0)
    {
        printf("%d\n", queue->value);
        queue = queue->next;
    }
}
[/code]

And after, the code for stacks:

[code language="c"]
LIST * push(LIST *stack, int value)
{
    LIST *new_element = malloc(sizeof(LIST));
    new_element->value = value;
    new_element->next = stack;

    return new_element;
}

void code04(void)
{
    LIST *stack = gen_list(3);
    LIST *head = stack;

    printf("stack:\n");
    while(stack != 0)
    {
        printf("%d\n", stack->value);
        stack = stack->next;
    }

    stack = push(head, 0);
    head = stack;

    printf("push element 0:\n");
    while(stack != 0)
    {
        printf("%d\n", stack->value);
        stack = stack->next;
    }

    printf("pop element 0:\n");
    head = head->next;
    stack = head;
    while(stack != 0)
    {
        printf("%d\n", stack->value);
        stack = stack->next;
    }
}
[/code]

All codes are <a href="https://github.com/embatbr/The-Men-Who-Stare-at-Codes/tree/master/posts/algorithms-in-a-nutshell" target="_blank">here</a>. Pay attention to the fact this code is merely for academic purposes. A more correct one would have structures and functions for lists, queues and stacks more complete. Just think of how Python's data structures may be implemented.

See you in the next post.

**Live long and prosper**